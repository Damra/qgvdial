/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i QtTelepathy/Common/BaseTypes -a include/QtTelepathy/Core/channelinterfacedtmfadaptor.h: xml/Channel_Interface_DTMF.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef CHANNELINTERFACEDTMFADAPTOR_H_1184774481
#define CHANNELINTERFACEDTMFADAPTOR_H_1184774481

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "basetypes.h"
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.freedesktop.Telepathy.Channel.Interface.DTMF
 */
class DTMFAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.freedesktop.Telepathy.Channel.Interface.DTMF")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.freedesktop.Telepathy.Channel.Interface.DTMF\" >\n"
"    <tp:requires interface=\"org.freedesktop.Telepathy.Channel.Type.StreamedMedia\" />\n"
"    <method name=\"StartTone\" >\n"
"      <arg direction=\"in\" type=\"u\" name=\"stream_id\" >\n"
"        <tp:docstring>A stream ID as defined in the StreamedMedia channel type.</tp:docstring>\n"
"      </arg>\n"
"      <arg direction=\"in\" tp:type=\"DTMF_Event\" type=\"y\" name=\"event\" >\n"
"        <tp:docstring>A numeric event code from the DTMF_Event enum.</tp:docstring>\n"
"      </arg>\n"
"      <tp:docstring>\n"
"        Start sending a DTMF tone on this stream. Where possible, the tone\n"
"        will continue until StopTone is called. On certain protocols, it may\n"
"        only be possible to send events with a predetermined length. In this\n"
"        case, the implementation may emit a fixed-length tone, and the StopTone\n"
"        method call should return NotAvailable.\n"
"      </tp:docstring>\n"
"      <tp:possible-errors>\n"
"        <tp:error name=\"org.freedesktop.Telepathy.Error.NetworkError\" />\n"
"        <tp:error name=\"org.freedesktop.Telepathy.Error.InvalidArgument\" >\n"
"          <tp:docstring>\n"
"            The given stream ID was invalid.\n"
"          </tp:docstring>\n"
"        </tp:error>\n"
"        <tp:error name=\"org.freedesktop.Telepathy.Error.NotAvailable\" >\n"
"          <tp:docstring>\n"
"            The requested event is not available on this stream.\n"
"          </tp:docstring>\n"
"        </tp:error>\n"
"      </tp:possible-errors>\n"
"    </method>\n"
"    <method name=\"StopTone\" >\n"
"      <arg direction=\"in\" type=\"u\" name=\"stream_id\" >\n"
"        <tp:docstring>A stream ID as defined in the StreamedMedia channel type.</tp:docstring>\n"
"      </arg>\n"
"      <tp:docstring>\n"
"        Stop sending any DTMF tone which has been started using the StartTone\n"
"        method. If there is no current tone, this method will do nothing.\n"
"      </tp:docstring>\n"
"      <tp:possible-errors>\n"
"        <tp:error name=\"org.freedesktop.Telepathy.Error.NetworkError\" />\n"
"        <tp:error name=\"org.freedesktop.Telepathy.Error.InvalidArgument\" >\n"
"          <tp:docstring>\n"
"            The given stream ID was invalid.\n"
"          </tp:docstring>\n"
"        </tp:error>\n"
"        <tp:error name=\"org.freedesktop.Telepathy.Error.NotAvailable\" >\n"
"          <tp:docstring>\n"
"            Continuous tones are not supported by this stream.\n"
"          </tp:docstring>\n"
"        </tp:error>\n"
"      </tp:possible-errors>\n"
"    </method>\n"
"    <tp:enum type=\"y\" name=\"DTMF_Event\" >\n"
"      <tp:enumvalue suffix=\"Digit_0\" value=\"0\" >\n"
"        <tp:docstring>0</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_1\" value=\"1\" >\n"
"        <tp:docstring>1</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_2\" value=\"2\" >\n"
"        <tp:docstring>2</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_3\" value=\"3\" >\n"
"        <tp:docstring>3</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_4\" value=\"4\" >\n"
"        <tp:docstring>4</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_5\" value=\"5\" >\n"
"        <tp:docstring>5</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_6\" value=\"6\" >\n"
"        <tp:docstring>6</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_7\" value=\"7\" >\n"
"        <tp:docstring>7</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_8\" value=\"8\" >\n"
"        <tp:docstring>8</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Digit_9\" value=\"9\" >\n"
"        <tp:docstring>9</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Asterisk\" value=\"10\" >\n"
"        <tp:docstring>*</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Hash\" value=\"11\" >\n"
"        <tp:docstring>#</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Letter_A\" value=\"12\" >\n"
"        <tp:docstring>A</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Letter_B\" value=\"13\" >\n"
"        <tp:docstring>B</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Letter_C\" value=\"14\" >\n"
"        <tp:docstring>C</tp:docstring>\n"
"      </tp:enumvalue>\n"
"      <tp:enumvalue suffix=\"Letter_D\" value=\"15\" >\n"
"        <tp:docstring>D</tp:docstring>\n"
"      </tp:enumvalue>\n"
"    </tp:enum>\n"
"    <tp:docstring xmlns=\"http://www.w3.org/1999/xhtml\" >\n"
"      An interface that gives a Channel the ability to send DTMF events over\n"
"      audio streams which have been established using the StreamedMedia channel\n"
"      type. The event codes used are in common with those defined in <a href=\"http://www.rfc-editor.org/rfc/rfc4733.txt\" >RFC4733</a>, and are\n"
"      listed in the DTMF_Event enumeration.\n"
"    </tp:docstring>\n"
"  </interface>\n"
        "")
public:
    DTMFAdaptor(QObject *parent);
    virtual ~DTMFAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void StartTone(uint stream_id, uchar event);
    void StopTone(uint stream_id);
Q_SIGNALS: // SIGNALS
};

#endif
