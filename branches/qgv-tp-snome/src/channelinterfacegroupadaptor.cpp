/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i QtTelepathy/Core/ChannelInterfaceGroupAdaptor -a :src/Core/channelinterfacegroupadaptor.cpp xml/tp-chan-iface-group.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "channelinterfacegroupadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class GroupAdaptor
 */

GroupAdaptor::GroupAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

GroupAdaptor::~GroupAdaptor()
{
    // destructor
}

void GroupAdaptor::AddMembers(const QList<uint> &contacts, const QString &message)
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.AddMembers
    QMetaObject::invokeMethod(parent(), "AddMembers", Q_ARG(QList<uint>, contacts), Q_ARG(QString, message));
}

QList<uint> GroupAdaptor::GetAllMembers(QList<uint> &local_pending, QList<uint> &remote_pending)
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.GetAllMembers
    //return static_cast<YourObjectType *>(parent())->GetAllMembers(local_pending, remote_pending);
    return QList<uint>();
}

uint GroupAdaptor::GetGroupFlags()
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.GetGroupFlags
    uint out0;
    QMetaObject::invokeMethod(parent(), "GetGroupFlags", Q_RETURN_ARG(uint, out0));
    return out0;
}

QList<uint> GroupAdaptor::GetHandleOwners(const QList<uint> &handles)
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.GetHandleOwners
    QList<uint> out0;
    QMetaObject::invokeMethod(parent(), "GetHandleOwners", Q_RETURN_ARG(QList<uint>, out0), Q_ARG(QList<uint>, handles));
    return out0;
}

QList<uint> GroupAdaptor::GetLocalPendingMembers()
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.GetLocalPendingMembers
    QList<uint> out0;
    QMetaObject::invokeMethod(parent(), "GetLocalPendingMembers", Q_RETURN_ARG(QList<uint>, out0));
    return out0;
}

QList<uint> GroupAdaptor::GetMembers()
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.GetMembers
    QList<uint> out0;
    QMetaObject::invokeMethod(parent(), "GetMembers", Q_RETURN_ARG(QList<uint>, out0));
    return out0;
}

QList<uint> GroupAdaptor::GetRemotePendingMembers()
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.GetRemotePendingMembers
    QList<uint> out0;
    QMetaObject::invokeMethod(parent(), "GetRemotePendingMembers", Q_RETURN_ARG(QList<uint>, out0));
    return out0;
}

uint GroupAdaptor::GetSelfHandle()
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.GetSelfHandle
    uint out0;
    QMetaObject::invokeMethod(parent(), "GetSelfHandle", Q_RETURN_ARG(uint, out0));
    return out0;
}

void GroupAdaptor::RemoveMembers(const QList<uint> &contacts, const QString &message)
{
    // handle method call org.freedesktop.Telepathy.Channel.Interface.Group.RemoveMembers
    QMetaObject::invokeMethod(parent(), "RemoveMembers", Q_ARG(QList<uint>, contacts), Q_ARG(QString, message));
}

