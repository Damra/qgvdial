!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddMembers	channel.cpp	/^void Channel::AddMembers(const QList<uint> &contacts,$/;"	f	class:Channel
AddMembers	channelinterfacegroupadaptor.cpp	/^void GroupAdaptor::AddMembers(const QList<uint> &contacts, const QString &message)$/;"	f	class:GroupAdaptor
Asterisk	channelinterfacedtmftypes.h	/^    Asterisk = 10,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
CHANNELADAPTOR_H_1172489891	channeladaptor.h	13;"	d
CHANNELINTERFACEDTMFADAPTOR_H_1184774481	channelinterfacedtmfadaptor.h	13;"	d
CHANNELINTERFACEGROUPADAPTOR_H_1172489890	channelinterfacegroupadaptor.h	13;"	d
CHANNELSTREAMEDMEDIAADAPTOR_H_1172489891	channelstreamedmediaadaptor.h	13;"	d
CHANNEL_GROUP_FLAG_ALL	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_ALL                      = 0xFFFFFFFF$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_CAN_ADD	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_CAN_ADD                  = 0x00000001,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_CAN_REMOVE	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_CAN_REMOVE               = 0x00000002,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_CAN_RESCIND	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_CAN_RESCIND              = 0x00000004,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES = 0x00000100,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_HANDLE_OWNERS_NOT_AVAILABLE	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_HANDLE_OWNERS_NOT_AVAILABLE = 0x00000400,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_MESSAGE_ACCEPT	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_MESSAGE_ACCEPT           = 0x00000020,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_MESSAGE_ADD	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_MESSAGE_ADD              = 0x00000008,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_MESSAGE_REJECT	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_MESSAGE_REJECT           = 0x00000040,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_MESSAGE_REMOVE	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_MESSAGE_REMOVE           = 0x00000010,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_MESSAGE_RESCIND	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_MESSAGE_RESCIND          = 0x00000080,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_NONE	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_NONE                     = 0x00000000,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CHANNEL_GROUP_FLAG_ONLY_ONE_GROUP	channelgroupinterfacetypes.h	/^    CHANNEL_GROUP_FLAG_ONLY_ONE_GROUP		= 0x00000200,$/;"	e	enum:org::freedesktop::Telepathy::GroupFlag
CONNECTIONADAPTOR_H_1172489892	connectionadaptor.h	13;"	d
CONNECTIONINTERFACEPRIVACYADAPTOR_H_1172489892	connectioninterfaceprivacyadaptor.h	13;"	d
CONNECTIONMANAGERADAPTOR_H_1172489892	connectionmanageradaptor.h	13;"	d
CONNECTION_STATUS_CONNECTED	connectiontypes.h	/^    CONNECTION_STATUS_CONNECTED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionState
CONNECTION_STATUS_CONNECTING	connectiontypes.h	/^    CONNECTION_STATUS_CONNECTING,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionState
CONNECTION_STATUS_DISCONNECTED	connectiontypes.h	/^    CONNECTION_STATUS_DISCONNECTED$/;"	e	enum:org::freedesktop::Telepathy::ConnectionState
CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_EXPIRED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_EXPIRED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_FINGERPRINT_MISMATCH	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_FINGERPRINT_MISMATCH,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_HOSTNAME_MISMATCH	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_HOSTNAME_MISMATCH,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_NOT_ACTIVATED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_NOT_ACTIVATED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_NOT_PROVIDED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_NOT_PROVIDED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_OTHER_ERROR	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_OTHER_ERROR$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_SELF_SIGNED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_SELF_SIGNED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_CERT_UNTRUSTED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_CERT_UNTRUSTED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_ENCRYPTION_ERROR	connectiontypes.h	/^    CONNECTION_STATUS_REASON_ENCRYPTION_ERROR,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_NAME_IN_USE	connectiontypes.h	/^    CONNECTION_STATUS_REASON_NAME_IN_USE,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_NETWORK_ERROR	connectiontypes.h	/^    CONNECTION_STATUS_REASON_NETWORK_ERROR,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_NONE_SPECIFIED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_NONE_SPECIFIED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CONNECTION_STATUS_REASON_REQUESTED	connectiontypes.h	/^    CONNECTION_STATUS_REASON_REQUESTED,$/;"	e	enum:org::freedesktop::Telepathy::ConnectionStateReason
CallFunctor	phoneconnector.cpp	/^        CallFunctor(const QString & l, const QString & r) :$/;"	f	class:__anon2::CallFunctor
CallFunctor	phoneconnector.cpp	/^    class CallFunctor : public Functor$/;"	c	namespace:__anon2	file:
Channel	channel.cpp	/^Channel::Channel(Connection * c, QObject * parent)$/;"	f	class:Channel
Channel	channel.h	/^class Channel : public QObject, protected QDBusContext$/;"	c
ChannelAdaptor	channeladaptor.cpp	/^ChannelAdaptor::ChannelAdaptor(QObject *parent)$/;"	f	class:ChannelAdaptor
ChannelAdaptor	channeladaptor.h	/^class ChannelAdaptor: public QDBusAbstractAdaptor$/;"	c
ChannelInfo	connectiontypes.h	/^class ChannelInfo$/;"	c	namespace:org::freedesktop::Telepathy
ChannelInfoList	connectiontypes.h	/^typedef QList<ChannelInfo> ChannelInfoList;$/;"	t	namespace:org::freedesktop::Telepathy
ChannelPrivate	channel.cpp	/^    ChannelPrivate(Connection * c,$/;"	f	class:ChannelPrivate
ChannelPrivate	channel.cpp	/^class ChannelPrivate$/;"	c	file:
Close	channel.cpp	/^void Channel::Close()$/;"	f	class:Channel
Close	channeladaptor.cpp	/^void ChannelAdaptor::Close()$/;"	f	class:ChannelAdaptor
Connect	connection.cpp	/^void Connection::Connect()$/;"	f	class:Connection
Connect	connectionadaptor.cpp	/^void ConnectionAdaptor::Connect()$/;"	f	class:ConnectionAdaptor
Connected	connection.h	/^        Connected = 0,$/;"	e	enum:Connection::Status
ConnectedFunctor	phoneconnector.cpp	/^        ConnectedFunctor(const QString & l, const QString & r, const bool s) :$/;"	f	class:__anon2::ConnectedFunctor
ConnectedFunctor	phoneconnector.cpp	/^    class ConnectedFunctor : public CallFunctor$/;"	c	namespace:__anon2	file:
Connecting	connection.h	/^        Connecting = 1,$/;"	e	enum:Connection::Status
Connection	connection.cpp	/^Connection::Connection(PhoneConnector * const pc,$/;"	f	class:Connection
Connection	connection.h	/^class Connection : public QObject, protected QDBusContext$/;"	c
ConnectionAdaptor	connectionadaptor.cpp	/^ConnectionAdaptor::ConnectionAdaptor(QObject *parent)$/;"	f	class:ConnectionAdaptor
ConnectionAdaptor	connectionadaptor.h	/^class ConnectionAdaptor: public QDBusAbstractAdaptor$/;"	c
ConnectionManager	connectionmanager.cpp	/^ConnectionManager::ConnectionManager(QObject * parent) :$/;"	f	class:ConnectionManager
ConnectionManager	connectionmanager.h	/^class ConnectionManager : public QObject$/;"	c
ConnectionManagerAdaptor	connectionmanageradaptor.cpp	/^ConnectionManagerAdaptor::ConnectionManagerAdaptor(QObject *parent)$/;"	f	class:ConnectionManagerAdaptor
ConnectionManagerAdaptor	connectionmanageradaptor.h	/^class ConnectionManagerAdaptor: public QDBusAbstractAdaptor$/;"	c
ConnectionManagerPrivate	connectionmanager.cpp	/^    ConnectionManagerPrivate(ConnectionManager * parent) :$/;"	f	class:ConnectionManagerPrivate
ConnectionManagerPrivate	connectionmanager.cpp	/^class ConnectionManagerPrivate$/;"	c	file:
ConnectionPrivate	connection.cpp	/^    ConnectionPrivate(Connection * p,$/;"	f	class:ConnectionPrivate
ConnectionPrivate	connection.cpp	/^class ConnectionPrivate$/;"	c	file:
ConnectionState	connectiontypes.h	/^enum ConnectionState {$/;"	g	namespace:org::freedesktop::Telepathy
ConnectionStateReason	connectiontypes.h	/^enum ConnectionStateReason {$/;"	g	namespace:org::freedesktop::Telepathy
DNDFunctor	phoneconnector.cpp	/^        DNDFunctor(const bool s) :$/;"	f	class:__anon2::DNDFunctor
DNDFunctor	phoneconnector.cpp	/^    class DNDFunctor : public Functor$/;"	c	namespace:__anon2	file:
DTMFAdaptor	channelinterfacedtmfadaptor.cpp	/^DTMFAdaptor::DTMFAdaptor(QObject *parent)$/;"	f	class:DTMFAdaptor
DTMFAdaptor	channelinterfacedtmfadaptor.h	/^class DTMFAdaptor: public QDBusAbstractAdaptor$/;"	c
DTMF_Event	channelinterfacedtmftypes.h	/^enum DTMF_Event {$/;"	g	namespace:org::freedesktop::Telepathy
Digit_0	channelinterfacedtmftypes.h	/^    Digit_0 = 0,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_1	channelinterfacedtmftypes.h	/^    Digit_1 = 1,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_2	channelinterfacedtmftypes.h	/^    Digit_2 = 2,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_3	channelinterfacedtmftypes.h	/^    Digit_3 = 3,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_4	channelinterfacedtmftypes.h	/^    Digit_4 = 4,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_5	channelinterfacedtmftypes.h	/^    Digit_5 = 5,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_6	channelinterfacedtmftypes.h	/^    Digit_6 = 6,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_7	channelinterfacedtmftypes.h	/^    Digit_7 = 7,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_8	channelinterfacedtmftypes.h	/^    Digit_8 = 8,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Digit_9	channelinterfacedtmftypes.h	/^    Digit_9 = 9,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Disconnect	connection.cpp	/^void Connection::Disconnect()$/;"	f	class:Connection
Disconnect	connectionadaptor.cpp	/^void ConnectionAdaptor::Disconnect()$/;"	f	class:ConnectionAdaptor
Disconnected	connection.h	/^        Disconnected = 2$/;"	e	enum:Connection::Status
Functor	phoneconnector.cpp	/^    class Functor$/;"	c	namespace:__anon2	file:
GetAllMembers	channel.cpp	/^QList<uint> Channel::GetAllMembers(QList<uint> &local_pending,$/;"	f	class:Channel
GetAllMembers	channelinterfacegroupadaptor.cpp	/^QList<uint> GroupAdaptor::GetAllMembers(QList<uint> &local_pending, QList<uint> &remote_pending)$/;"	f	class:GroupAdaptor
GetChannelType	channel.cpp	/^QString Channel::GetChannelType() const$/;"	f	class:Channel
GetChannelType	channeladaptor.cpp	/^QString ChannelAdaptor::GetChannelType()$/;"	f	class:ChannelAdaptor
GetGroupFlags	channel.cpp	/^uint Channel::GetGroupFlags()$/;"	f	class:Channel
GetGroupFlags	channelinterfacegroupadaptor.cpp	/^uint GroupAdaptor::GetGroupFlags()$/;"	f	class:GroupAdaptor
GetHandle	channel.cpp	/^uint Channel::GetHandle(uint &id) const$/;"	f	class:Channel
GetHandle	channeladaptor.cpp	/^uint ChannelAdaptor::GetHandle(uint &id)$/;"	f	class:ChannelAdaptor
GetHandleOwners	channel.cpp	/^QList<uint> Channel::GetHandleOwners(const QList<uint> &handles)$/;"	f	class:Channel
GetHandleOwners	channelinterfacegroupadaptor.cpp	/^QList<uint> GroupAdaptor::GetHandleOwners(const QList<uint> &handles)$/;"	f	class:GroupAdaptor
GetInterfaces	channel.cpp	/^QStringList Channel::GetInterfaces() const$/;"	f	class:Channel
GetInterfaces	channeladaptor.cpp	/^QStringList ChannelAdaptor::GetInterfaces()$/;"	f	class:ChannelAdaptor
GetInterfaces	connection.cpp	/^QStringList Connection::GetInterfaces()$/;"	f	class:Connection
GetInterfaces	connectionadaptor.cpp	/^QStringList ConnectionAdaptor::GetInterfaces()$/;"	f	class:ConnectionAdaptor
GetLocalPendingMembers	channel.cpp	/^QList<uint> Channel::GetLocalPendingMembers()$/;"	f	class:Channel
GetLocalPendingMembers	channelinterfacegroupadaptor.cpp	/^QList<uint> GroupAdaptor::GetLocalPendingMembers()$/;"	f	class:GroupAdaptor
GetMembers	channel.cpp	/^QList<uint> Channel::GetMembers()$/;"	f	class:Channel
GetMembers	channelinterfacegroupadaptor.cpp	/^QList<uint> GroupAdaptor::GetMembers()$/;"	f	class:GroupAdaptor
GetParameters	connectionmanager.cpp	/^ConnectionManager::GetParameters(const QString &proto)$/;"	f	class:ConnectionManager
GetParameters	connectionmanageradaptor.cpp	/^org::freedesktop::Telepathy::ParameterDefinitionList ConnectionManagerAdaptor::GetParameters(const QString &proto)$/;"	f	class:ConnectionManagerAdaptor
GetPrivacyMode	connection.cpp	/^QString Connection::GetPrivacyMode()$/;"	f	class:Connection
GetPrivacyMode	connectioninterfaceprivacyadaptor.cpp	/^QString PrivacyAdaptor::GetPrivacyMode()$/;"	f	class:PrivacyAdaptor
GetPrivacyModes	connection.cpp	/^QStringList Connection::GetPrivacyModes()$/;"	f	class:Connection
GetPrivacyModes	connectioninterfaceprivacyadaptor.cpp	/^QStringList PrivacyAdaptor::GetPrivacyModes()$/;"	f	class:PrivacyAdaptor
GetProtocol	connection.cpp	/^QString Connection::GetProtocol()$/;"	f	class:Connection
GetProtocol	connectionadaptor.cpp	/^QString ConnectionAdaptor::GetProtocol()$/;"	f	class:ConnectionAdaptor
GetRemotePendingMembers	channel.cpp	/^QList<uint> Channel::GetRemotePendingMembers()$/;"	f	class:Channel
GetRemotePendingMembers	channelinterfacegroupadaptor.cpp	/^QList<uint> GroupAdaptor::GetRemotePendingMembers()$/;"	f	class:GroupAdaptor
GetSelfHandle	channel.cpp	/^uint Channel::GetSelfHandle()$/;"	f	class:Channel
GetSelfHandle	channelinterfacegroupadaptor.cpp	/^uint GroupAdaptor::GetSelfHandle()$/;"	f	class:GroupAdaptor
GetSelfHandle	connection.cpp	/^uint Connection::GetSelfHandle()$/;"	f	class:Connection
GetSelfHandle	connectionadaptor.cpp	/^uint ConnectionAdaptor::GetSelfHandle()$/;"	f	class:ConnectionAdaptor
GetStatus	connection.cpp	/^uint Connection::GetStatus()$/;"	f	class:Connection
GetStatus	connectionadaptor.cpp	/^uint ConnectionAdaptor::GetStatus()$/;"	f	class:ConnectionAdaptor
GroupAdaptor	channelinterfacegroupadaptor.cpp	/^GroupAdaptor::GroupAdaptor(QObject *parent)$/;"	f	class:GroupAdaptor
GroupAdaptor	channelinterfacegroupadaptor.h	/^class GroupAdaptor: public QDBusAbstractAdaptor$/;"	c
GroupFlag	channelgroupinterfacetypes.h	/^enum GroupFlag {$/;"	g	namespace:org::freedesktop::Telepathy
HANDLE_TYPE_CONTACT	connectiontypes.h	/^    HANDLE_TYPE_CONTACT,$/;"	e	enum:org::freedesktop::Telepathy::HandleType
HANDLE_TYPE_LIST	connectiontypes.h	/^    HANDLE_TYPE_LIST$/;"	e	enum:org::freedesktop::Telepathy::HandleType
HANDLE_TYPE_NONE	connectiontypes.h	/^    HANDLE_TYPE_NONE = 0,$/;"	e	enum:org::freedesktop::Telepathy::HandleType
HANDLE_TYPE_ROOM	connectiontypes.h	/^    HANDLE_TYPE_ROOM,$/;"	e	enum:org::freedesktop::Telepathy::HandleType
Handle	connection.h	/^    enum Handle$/;"	g	class:Connection
HandleContact	connection.h	/^        HandleContact = 1,$/;"	e	enum:Connection::Handle
HandleGroup	connection.h	/^        HandleGroup = 4$/;"	e	enum:Connection::Handle
HandleNone	connection.h	/^        HandleNone = 0,$/;"	e	enum:Connection::Handle
HandleRoom	connection.h	/^        HandleRoom = 2,$/;"	e	enum:Connection::Handle
HandleRoomList	connection.h	/^        HandleRoomList = 3,$/;"	e	enum:Connection::Handle
HandleType	connectiontypes.h	/^enum HandleType {$/;"	g	namespace:org::freedesktop::Telepathy
Hash	channelinterfacedtmftypes.h	/^    Hash = 11,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
HoldHandles	connection.cpp	/^void Connection::HoldHandles(const uint handle_type, const QList<uint> &handles)$/;"	f	class:Connection
HoldHandles	connectionadaptor.cpp	/^void ConnectionAdaptor::HoldHandles(uint handle_type, const QList<uint> &handles)$/;"	f	class:ConnectionAdaptor
IncomingCallFunctor	phoneconnector.cpp	/^        IncomingCallFunctor(const QString & l, const QString & r) :$/;"	f	class:__anon2::IncomingCallFunctor
IncomingCallFunctor	phoneconnector.cpp	/^    class IncomingCallFunctor : public CallFunctor$/;"	c	namespace:__anon2	file:
InspectHandles	connection.cpp	/^QStringList Connection::InspectHandles(const uint handle_type,$/;"	f	class:Connection
InspectHandles	connectionadaptor.cpp	/^QStringList ConnectionAdaptor::InspectHandles(uint handle_type, const QList<uint> &handles)$/;"	f	class:ConnectionAdaptor
Letter_A	channelinterfacedtmftypes.h	/^    Letter_A = 12,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Letter_B	channelinterfacedtmftypes.h	/^    Letter_B = 13,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Letter_C	channelinterfacedtmftypes.h	/^    Letter_C = 14,$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
Letter_D	channelinterfacedtmftypes.h	/^    Letter_D = 15$/;"	e	enum:org::freedesktop::Telepathy::DTMF_Event
ListChannels	connection.cpp	/^org::freedesktop::Telepathy::ChannelInfoList Connection::ListChannels()$/;"	f	class:Connection
ListChannels	connectionadaptor.cpp	/^org::freedesktop::Telepathy::ChannelInfoList ConnectionAdaptor::ListChannels()$/;"	f	class:ConnectionAdaptor
ListProtocols	connectionmanager.cpp	/^QStringList ConnectionManager::ListProtocols()$/;"	f	class:ConnectionManager
ListProtocols	connectionmanageradaptor.cpp	/^QStringList ConnectionManagerAdaptor::ListProtocols()$/;"	f	class:ConnectionManagerAdaptor
ListStreams	channel.cpp	/^org::freedesktop::Telepathy::StreamInfoList Channel::ListStreams()$/;"	f	class:Channel
ListStreams	channelstreamedmediaadaptor.cpp	/^org::freedesktop::Telepathy::StreamInfoList StreamedMediaAdaptor::ListStreams()$/;"	f	class:StreamedMediaAdaptor
None	connectionmanager.h	/^        None = 0,$/;"	e	enum:ConnectionManager::ParamFlags
OutgoingCallFunctor	phoneconnector.cpp	/^        OutgoingCallFunctor(const QString & l, const QString & r) :$/;"	f	class:__anon2::OutgoingCallFunctor
OutgoingCallFunctor	phoneconnector.cpp	/^    class OutgoingCallFunctor : public CallFunctor$/;"	c	namespace:__anon2	file:
ParamFlags	connectionmanager.h	/^    enum ParamFlags$/;"	g	class:ConnectionManager
ParameterDefinition	connectionmanagertypes.h	/^class ParameterDefinition$/;"	c	namespace:org::freedesktop::Telepathy
ParameterDefinitionList	connectionmanagertypes.h	/^typedef QList<ParameterDefinition> ParameterDefinitionList;$/;"	t	namespace:org::freedesktop::Telepathy
PhoneConnector	phoneconnector.cpp	/^PhoneConnector::PhoneConnector(const QString & serv, const uint prt,$/;"	f	class:PhoneConnector
PhoneConnector	phoneconnector.h	/^class PhoneConnector : public QObject$/;"	c
PhoneConnectorPrivate	phoneconnector.cpp	/^    PhoneConnectorPrivate(PhoneConnector * const p,$/;"	f	class:PhoneConnectorPrivate
PhoneConnectorPrivate	phoneconnector.cpp	/^class PhoneConnectorPrivate$/;"	c	file:
PrivacyAdaptor	connectioninterfaceprivacyadaptor.cpp	/^PrivacyAdaptor::PrivacyAdaptor(QObject *parent)$/;"	f	class:PrivacyAdaptor
PrivacyAdaptor	connectioninterfaceprivacyadaptor.h	/^class PrivacyAdaptor: public QDBusAbstractAdaptor$/;"	c
QTTELEPATHY_BASETYPES_H	basetypes.h	23;"	d
QTTELEPATHY_CHANNELIFACEGROUP_H	channelgroupinterfacetypes.h	23;"	d
QTTELEPATHY_CHANNELSTREAMEDMEDIATYPES_H	channelstreamedmediatypes.h	23;"	d
QTTELEPATHY_CHANNELTYPEDTMF_H	channelinterfacedtmftypes.h	23;"	d
QTTELEPATHY_CONNECTIONMANAGERTYPES_H	connectionmanagertypes.h	23;"	d
QTTELEPATHY_CONNECTION_H	connectiontypes.h	23;"	d
Reason	connection.h	/^    enum Reason$/;"	g	class:Connection
ReasonAuthenticationFailed	connection.h	/^        ReasonAuthenticationFailed = 3,$/;"	e	enum:Connection::Reason
ReasonCertExpired	connection.h	/^        ReasonCertExpired = 8,$/;"	e	enum:Connection::Reason
ReasonCertFingerprintMismatch	connection.h	/^        ReasonCertFingerprintMismatch = 11,$/;"	e	enum:Connection::Reason
ReasonCertHostnameMismatch	connection.h	/^        ReasonCertHostnameMismatch = 10,$/;"	e	enum:Connection::Reason
ReasonCertNotActivated	connection.h	/^        ReasonCertNotActivated = 9,$/;"	e	enum:Connection::Reason
ReasonCertNotProvided	connection.h	/^        ReasonCertNotProvided = 6,$/;"	e	enum:Connection::Reason
ReasonCertOtherError	connection.h	/^        ReasonCertOtherError = 13$/;"	e	enum:Connection::Reason
ReasonCertSelfSigned	connection.h	/^        ReasonCertSelfSigned = 12,$/;"	e	enum:Connection::Reason
ReasonCertUntrusted	connection.h	/^        ReasonCertUntrusted = 7,$/;"	e	enum:Connection::Reason
ReasonEncryptionError	connection.h	/^        ReasonEncryptionError = 4,$/;"	e	enum:Connection::Reason
ReasonNameInUse	connection.h	/^        ReasonNameInUse = 5,$/;"	e	enum:Connection::Reason
ReasonNetworkError	connection.h	/^        ReasonNetworkError = 2,$/;"	e	enum:Connection::Reason
ReasonNone	connection.h	/^        ReasonNone = 0,$/;"	e	enum:Connection::Reason
ReasonRequested	connection.h	/^        ReasonRequested = 1,$/;"	e	enum:Connection::Reason
Register	connectionmanager.h	/^        Register = 2,$/;"	e	enum:ConnectionManager::ParamFlags
ReleaseHandles	connection.cpp	/^void Connection::ReleaseHandles(const uint handle_type, const QList<uint> &handles)$/;"	f	class:Connection
ReleaseHandles	connectionadaptor.cpp	/^void ConnectionAdaptor::ReleaseHandles(uint handle_type, const QList<uint> &handles)$/;"	f	class:ConnectionAdaptor
RemoveMembers	channel.cpp	/^void Channel::RemoveMembers(const QList<uint> &contacts,$/;"	f	class:Channel
RemoveMembers	channelinterfacegroupadaptor.cpp	/^void GroupAdaptor::RemoveMembers(const QList<uint> &contacts, const QString &message)$/;"	f	class:GroupAdaptor
RemoveStreams	channel.cpp	/^void Channel::RemoveStreams(org::freedesktop::Telepathy::StreamTypeList streams)$/;"	f	class:Channel
RemoveStreams	channelstreamedmediaadaptor.cpp	/^void StreamedMediaAdaptor::RemoveStreams(org::freedesktop::Telepathy::StreamTypeList streams)$/;"	f	class:StreamedMediaAdaptor
RequestChannel	connection.cpp	/^QDBusObjectPath Connection::RequestChannel(const QString &type,$/;"	f	class:Connection
RequestChannel	connectionadaptor.cpp	/^QDBusObjectPath ConnectionAdaptor::RequestChannel(const QString &type, uint handle_type, uint handle, bool suppress_handler)$/;"	f	class:ConnectionAdaptor
RequestConnection	connectionmanager.cpp	/^QString ConnectionManager::RequestConnection(const QString & proto,$/;"	f	class:ConnectionManager
RequestConnection	connectionmanageradaptor.cpp	/^QString ConnectionManagerAdaptor::RequestConnection(const QString &proto, QVariantMap parameters, QDBusObjectPath &object_path)$/;"	f	class:ConnectionManagerAdaptor
RequestHandles	connection.cpp	/^QList<uint> Connection::RequestHandles(uint handle_type,$/;"	f	class:Connection
RequestHandles	connectionadaptor.cpp	/^QList<uint> ConnectionAdaptor::RequestHandles(uint handle_type, const QStringList &names)$/;"	f	class:ConnectionAdaptor
RequestStreamDirection	channel.cpp	/^void Channel::RequestStreamDirection(uint stream_id, uint stream_direction)$/;"	f	class:Channel
RequestStreamDirection	channelstreamedmediaadaptor.cpp	/^void StreamedMediaAdaptor::RequestStreamDirection(uint stream_id, uint stream_direction)$/;"	f	class:StreamedMediaAdaptor
RequestStreams	channel.cpp	/^Channel::RequestStreams(uint contact_handle, org::freedesktop::Telepathy::StreamTypeList types)$/;"	f	class:Channel
RequestStreams	channelstreamedmediaadaptor.cpp	/^org::freedesktop::Telepathy::StreamInfoList StreamedMediaAdaptor::RequestStreams(uint contact_handle, org::freedesktop::Telepathy::StreamTypeList types)$/;"	f	class:StreamedMediaAdaptor
Required	connectionmanager.h	/^        Required = 1,$/;"	e	enum:ConnectionManager::ParamFlags
STREAM_DIRECTION_BIDIRECTIONAL	channelstreamedmediatypes.h	/^    STREAM_DIRECTION_BIDIRECTIONAL = 3$/;"	e	enum:org::freedesktop::Telepathy::StreamDirection
STREAM_DIRECTION_NONE	channelstreamedmediatypes.h	/^    STREAM_DIRECTION_NONE = 0,$/;"	e	enum:org::freedesktop::Telepathy::StreamDirection
STREAM_DIRECTION_RECEIVE	channelstreamedmediatypes.h	/^    STREAM_DIRECTION_RECEIVE = 2,$/;"	e	enum:org::freedesktop::Telepathy::StreamDirection
STREAM_DIRECTION_SEND	channelstreamedmediatypes.h	/^    STREAM_DIRECTION_SEND = 1,$/;"	e	enum:org::freedesktop::Telepathy::StreamDirection
STREAM_STATE_CONNECTED	channelstreamedmediatypes.h	/^    STREAM_STATE_CONNECTED = 2$/;"	e	enum:org::freedesktop::Telepathy::StreamState
STREAM_STATE_CONNECTING	channelstreamedmediatypes.h	/^    STREAM_STATE_CONNECTING = 1,$/;"	e	enum:org::freedesktop::Telepathy::StreamState
STREAM_STATE_DISCONNECTED	channelstreamedmediatypes.h	/^    STREAM_STATE_DISCONNECTED = 0,$/;"	e	enum:org::freedesktop::Telepathy::StreamState
STREAM_TYPE_AUDIO	channelstreamedmediatypes.h	/^    STREAM_TYPE_AUDIO = 0,$/;"	e	enum:org::freedesktop::Telepathy::StreamType
STREAM_TYPE_VIDEO	channelstreamedmediatypes.h	/^    STREAM_TYPE_VIDEO = 1$/;"	e	enum:org::freedesktop::Telepathy::StreamType
SetPrivacyMode	connection.cpp	/^void Connection::SetPrivacyMode(const QString &mode)$/;"	f	class:Connection
SetPrivacyMode	connectioninterfaceprivacyadaptor.cpp	/^void PrivacyAdaptor::SetPrivacyMode(const QString &mode)$/;"	f	class:PrivacyAdaptor
StartTone	channel.cpp	/^void Channel::StartTone(uint stream_id, uchar event)$/;"	f	class:Channel
StartTone	channelinterfacedtmfadaptor.cpp	/^void DTMFAdaptor::StartTone(uint stream_id, uchar event)$/;"	f	class:DTMFAdaptor
Status	connection.h	/^    enum Status$/;"	g	class:Connection
StopTone	channel.cpp	/^void Channel::StopTone(uint stream_id)$/;"	f	class:Channel
StopTone	channelinterfacedtmfadaptor.cpp	/^void DTMFAdaptor::StopTone(uint stream_id)$/;"	f	class:DTMFAdaptor
StreamDirection	channelstreamedmediatypes.h	/^enum StreamDirection {$/;"	g	namespace:org::freedesktop::Telepathy
StreamInfo	channelstreamedmediatypes.h	/^class StreamInfo$/;"	c	namespace:org::freedesktop::Telepathy
StreamInfoList	channelstreamedmediatypes.h	/^typedef QList<StreamInfo> StreamInfoList;$/;"	t	namespace:org::freedesktop::Telepathy
StreamState	channelstreamedmediatypes.h	/^enum StreamState {$/;"	g	namespace:org::freedesktop::Telepathy
StreamType	channelstreamedmediatypes.h	/^enum StreamType {$/;"	g	namespace:org::freedesktop::Telepathy
StreamTypeList	channelstreamedmediatypes.h	/^typedef QList<uint> StreamTypeList;$/;"	t	namespace:org::freedesktop::Telepathy
StreamedMediaAdaptor	channelstreamedmediaadaptor.cpp	/^StreamedMediaAdaptor::StreamedMediaAdaptor(QObject *parent)$/;"	f	class:StreamedMediaAdaptor
StreamedMediaAdaptor	channelstreamedmediaadaptor.h	/^class StreamedMediaAdaptor: public QDBusAbstractAdaptor$/;"	c
Telepathy	channelgroupinterfacetypes.h	/^namespace Telepathy {$/;"	n	namespace:org::freedesktop
Telepathy	channelinterfacedtmftypes.h	/^namespace Telepathy {$/;"	n	namespace:org::freedesktop
Telepathy	channelstreamedmediatypes.h	/^namespace Telepathy {$/;"	n	namespace:org::freedesktop
Telepathy	connectionmanagertypes.h	/^namespace Telepathy {$/;"	n	namespace:org::freedesktop
Telepathy	connectiontypes.h	/^namespace Telepathy {$/;"	n	namespace:org::freedesktop
_SNOM_CHANNEL_H_	channel.h	22;"	d
_SNOM_CONNECTIONMANAGER_H_	connectionmanager.h	22;"	d
_SNOM_CONNECTION_H_	connection.h	22;"	d
_SNOM_NAMES_H_	names.h	26;"	d
_SNOM_PHONECONNECTOR_H_	phoneconnector.h	22;"	d
account	connection.cpp	/^    const QString account;$/;"	m	class:ConnectionPrivate	file:
adaptor	channel.cpp	/^    ChannelAdaptor * const adaptor;$/;"	m	class:ChannelPrivate	file:
adaptor	connection.cpp	/^    ConnectionAdaptor * adaptor;$/;"	m	class:ConnectionPrivate	file:
adaptor	connectionmanager.cpp	/^    ConnectionManagerAdaptor * const adaptor;$/;"	m	class:ConnectionManagerPrivate	file:
addConnection	phoneconnector.cpp	/^void PhoneConnector::addConnection(Connection * conn)$/;"	f	class:PhoneConnector
blockingGet	phoneconnector.cpp	/^bool PhoneConnector::blockingGet(const QString & page, QIODevice * dev) const$/;"	f	class:PhoneConnector
callDetected	phoneconnector.cpp	/^    void callDetected(const QHash<QString, QString>& data)$/;"	f	class:PhoneConnectorPrivate
channels	connection.cpp	/^    QList<Channel *> channels;$/;"	m	class:ConnectionPrivate	file:
confirmed_members	channel.cpp	/^    QList<uint> confirmed_members;$/;"	m	class:ChannelPrivate	file:
connectOutgoingChannel	channel.cpp	/^bool Channel::connectOutgoingChannel()$/;"	f	class:Channel
connection	channel.cpp	/^    Connection * const connection;$/;"	m	class:ChannelPrivate	file:
connectionList	phoneconnector.cpp	/^    QList<Connection *> connectionList;$/;"	m	class:PhoneConnectorPrivate	file:
connection_status	connection.cpp	/^    Connection::Status connection_status;$/;"	m	class:ConnectionPrivate	file:
connector	connection.cpp	/^    PhoneConnector * const connector;$/;"	m	class:ConnectionPrivate	file:
connector	connection.cpp	/^PhoneConnector * Connection::connector() const$/;"	f	class:Connection
connectors	connectionmanager.cpp	/^    QList<PhoneConnector *> connectors;$/;"	m	class:ConnectionManagerPrivate	file:
contactHandle	channelstreamedmediatypes.h	/^    uint contactHandle;$/;"	m	class:org::freedesktop::Telepathy::StreamInfo
contactUsageCount	connection.cpp	/^    QHash<uint, uint> contactUsageCount;$/;"	m	class:ConnectionPrivate	file:
createChannel	connection.cpp	/^    Channel * createChannel()$/;"	f	class:ConnectionPrivate
currentId	phoneconnector.cpp	/^    int currentId;$/;"	m	class:PhoneConnectorPrivate	file:
d	channel.h	/^    ChannelPrivate * const d;$/;"	m	class:Channel
d	connection.h	/^    ConnectionPrivate * const d;$/;"	m	class:Connection
d	connectionmanager.h	/^    ConnectionManagerPrivate * const d;$/;"	m	class:ConnectionManager
d	phoneconnector.h	/^    PhoneConnectorPrivate * const d;$/;"	m	class:PhoneConnector
defaultValue	connectionmanagertypes.h	/^    QDBusVariant defaultValue;$/;"	m	class:org::freedesktop::Telepathy::ParameterDefinition
dial	phoneconnector.cpp	/^bool PhoneConnector::dial(const QString & target, const QString & uri) const$/;"	f	class:PhoneConnector
direction	channelstreamedmediatypes.h	/^    quint32 direction;$/;"	m	class:org::freedesktop::Telepathy::StreamInfo
doChannelClosed	connection.cpp	/^void Connection::doChannelClosed()$/;"	f	class:Connection
doDeleteNotificationSocket	phoneconnector.cpp	/^void PhoneConnector::doDeleteNotificationSocket()$/;"	f	class:PhoneConnector
doHandleNotification	phoneconnector.cpp	/^void PhoneConnector::doHandleNotification()$/;"	f	class:PhoneConnector
doNotDisturb	connection.cpp	/^    bool doNotDisturb;$/;"	m	class:ConnectionPrivate	file:
doReadNotification	phoneconnector.cpp	/^void PhoneConnector::doReadNotification()$/;"	f	class:PhoneConnector
dtmfAdaptor	channel.cpp	/^    DTMFAdaptor * const dtmfAdaptor;$/;"	m	class:ChannelPrivate	file:
findChannel	connection.cpp	/^    Channel * findChannel(const uint handle_id)$/;"	f	class:ConnectionPrivate
findConnection	phoneconnector.cpp	/^    Connection * findConnection(const QString & local) const$/;"	f	class:PhoneConnectorPrivate
findHandle	connection.cpp	/^uint Connection::findHandle(const QString & uri)$/;"	f	class:Connection
findHandleInternal	connection.cpp	/^uint Connection::findHandleInternal(const QString & uri) const$/;"	f	class:Connection
flags	connectionmanagertypes.h	/^    uint flags;$/;"	m	class:org::freedesktop::Telepathy::ParameterDefinition
freedesktop	channelgroupinterfacetypes.h	/^namespace freedesktop {$/;"	n	namespace:org
freedesktop	channelinterfacedtmftypes.h	/^namespace freedesktop {$/;"	n	namespace:org
freedesktop	channelstreamedmediatypes.h	/^namespace freedesktop {$/;"	n	namespace:org
freedesktop	connectionmanagertypes.h	/^namespace freedesktop {$/;"	n	namespace:org
freedesktop	connectiontypes.h	/^namespace freedesktop {$/;"	n	namespace:org
getHandle	phoneconnector.cpp	/^        uint getHandle(Connection * conn, const QString & s) const$/;"	f	class:__anon2::CallFunctor
getPrivacyModeString	connection.cpp	/^QString Connection::getPrivacyModeString() const$/;"	f	class:Connection
groupAdaptor	channel.cpp	/^    GroupAdaptor * const groupAdaptor;$/;"	m	class:ChannelPrivate	file:
handle	connectiontypes.h	/^    uint handle;$/;"	m	class:org::freedesktop::Telepathy::ChannelInfo
handleType	connectiontypes.h	/^    uint handleType;$/;"	m	class:org::freedesktop::Telepathy::ChannelInfo
handlesAccount	connection.cpp	/^bool Connection::handlesAccount(const QString & account) const$/;"	f	class:Connection
hasDefault	connectionmanager.h	/^        hasDefault = 4$/;"	e	enum:ConnectionManager::ParamFlags
hasOpposite	channel.cpp	/^bool Channel::hasOpposite(const uint id)$/;"	f	class:Channel
id	channelstreamedmediatypes.h	/^    uint id;$/;"	m	class:org::freedesktop::Telepathy::StreamInfo
ids	phoneconnector.cpp	/^    QStringList ids;$/;"	m	class:PhoneConnectorPrivate	file:
incomingCall	connection.cpp	/^void Connection::incomingCall(const uint local_handle, const uint remote_handle)$/;"	f	class:Connection
incomingChannel	channel.cpp	/^void Channel::incomingChannel(const uint handle)$/;"	f	class:Channel
interfaceName	connectiontypes.h	/^    QString interfaceName;$/;"	m	class:org::freedesktop::Telepathy::ChannelInfo
isConnected	phoneconnector.cpp	/^bool PhoneConnector::isConnected() const$/;"	f	class:PhoneConnector
isTrue	phoneconnector.cpp	/^    bool isTrue(const QString & value)$/;"	f	namespace:__anon2
knownContacts	connection.cpp	/^    QHash<uint, QString> knownContacts;$/;"	m	class:ConnectionPrivate	file:
knowsAccount	phoneconnector.cpp	/^bool PhoneConnector::knowsAccount(const QString & account) const$/;"	f	class:PhoneConnector
listenPort	phoneconnector.cpp	/^    const uint listenPort;$/;"	m	class:PhoneConnectorPrivate	file:
local	phoneconnector.cpp	/^        const QString local;$/;"	m	class:__anon2::CallFunctor	file:
local_pending_members	channel.cpp	/^    QList<uint> local_pending_members;$/;"	m	class:ChannelPrivate	file:
main	main.cpp	/^main(int argc, char ** argv)$/;"	f
name	channel.cpp	/^QString Channel::name() const$/;"	f	class:Channel
name	connection.cpp	/^QString Connection::name() const$/;"	f	class:Connection
name	connectionmanagertypes.h	/^    QString name;$/;"	m	class:org::freedesktop::Telepathy::ParameterDefinition
name	phoneconnector.cpp	/^QString PhoneConnector::name() const$/;"	f	class:PhoneConnector
nextContactHandle	connection.cpp	/^    uint nextContactHandle;$/;"	m	class:ConnectionPrivate	file:
notificationServer	phoneconnector.cpp	/^    QTcpServer * const notificationServer;$/;"	m	class:PhoneConnectorPrivate	file:
notificationSockets	phoneconnector.cpp	/^    QList<QTcpSocket *> notificationSockets;$/;"	m	class:PhoneConnectorPrivate	file:
notifyAllConnections	phoneconnector.cpp	/^    void notifyAllConnections(const Functor & op)$/;"	f	class:PhoneConnectorPrivate
notifySingleConnection	phoneconnector.cpp	/^    void notifySingleConnection(const QString & account, const Functor & op)$/;"	f	class:PhoneConnectorPrivate
objectPath	channel.cpp	/^QDBusObjectPath Channel::objectPath() const$/;"	f	class:Channel
objectPath	connection.cpp	/^QDBusObjectPath Connection::objectPath() const$/;"	f	class:Connection
objectPath	connectiontypes.h	/^    QDBusObjectPath objectPath;$/;"	m	class:org::freedesktop::Telepathy::ChannelInfo
onPhoneConnectorIsEmpty	connectionmanager.cpp	/^void ConnectionManager::onPhoneConnectorIsEmpty(PhoneConnector * const connector)$/;"	f	class:ConnectionManager
operator ()	phoneconnector.cpp	/^        void operator()(Connection * conn) const$/;"	f	class:__anon2::ConnectedFunctor
operator ()	phoneconnector.cpp	/^        void operator()(Connection * conn) const$/;"	f	class:__anon2::DNDFunctor
operator ()	phoneconnector.cpp	/^        void operator()(Connection * conn) const$/;"	f	class:__anon2::IncomingCallFunctor
operator ()	phoneconnector.cpp	/^        void operator()(Connection * conn) const$/;"	f	class:__anon2::OutgoingCallFunctor
operator <<	channelstreamedmediatypes.cpp	/^QDBusArgument &operator<<(QDBusArgument &argument, const org::freedesktop::Telepathy::StreamInfo &info)$/;"	f
operator <<	connectionmanagertypes.cpp	/^QDBusArgument &operator<<(QDBusArgument &argument, const ParameterDefinition &param)$/;"	f
operator <<	connectiontypes.cpp	/^QDBusArgument &operator<<(QDBusArgument &argument, const ChannelInfo &info)$/;"	f
operator >>	channelstreamedmediatypes.cpp	/^const QDBusArgument &operator>>(const QDBusArgument &argument, org::freedesktop::Telepathy::StreamInfo &info)$/;"	f
operator >>	connectionmanagertypes.cpp	/^const QDBusArgument &operator>>(const QDBusArgument &argument, ParameterDefinition &param)$/;"	f
operator >>	connectiontypes.cpp	/^const QDBusArgument &operator>>(const QDBusArgument &argument, ChannelInfo &info)$/;"	f
org	channelgroupinterfacetypes.h	/^namespace org {$/;"	n
org	channelinterfacedtmftypes.h	/^namespace org {$/;"	n
org	channelstreamedmediatypes.h	/^namespace org {$/;"	n
org	connectionmanagertypes.h	/^namespace org {$/;"	n
org	connectiontypes.h	/^namespace org {$/;"	n
outgoingCall	connection.cpp	/^void Connection::outgoingCall(const uint local_handle, const uint remote_handle)$/;"	f	class:Connection
outgoingChannel	channel.cpp	/^void Channel::outgoingChannel(const uint handle)$/;"	f	class:Channel
parent	connection.cpp	/^    Connection * const parent;$/;"	m	class:ConnectionPrivate	file:
parent	phoneconnector.cpp	/^    PhoneConnector * const parent;$/;"	m	class:PhoneConnectorPrivate	file:
pendingFlags	channelstreamedmediatypes.h	/^    quint32 pendingFlags;$/;"	m	class:org::freedesktop::Telepathy::StreamInfo
phoneAddress	phoneconnector.cpp	/^QHostAddress PhoneConnector::phoneAddress() const$/;"	f	class:PhoneConnector
port	phoneconnector.cpp	/^    const uint port;$/;"	m	class:PhoneConnectorPrivate	file:
privacyAdaptor	connection.cpp	/^    PrivacyAdaptor * privacyAdaptor;$/;"	m	class:ConnectionPrivate	file:
protocol	channel.cpp	/^    QHttp protocol;$/;"	m	class:ChannelPrivate	file:
protocol	phoneconnector.cpp	/^    QHttp protocol;$/;"	m	class:PhoneConnectorPrivate	file:
qDebugHandler	main.cpp	/^qDebugHandler (QtMsgType type, const char *msg)$/;"	f
registerObject	channel.cpp	/^bool Channel::registerObject()$/;"	f	class:Channel
registerObject	connection.cpp	/^bool Connection::registerObject()$/;"	f	class:Connection
remote	phoneconnector.cpp	/^        const QString remote;$/;"	m	class:__anon2::CallFunctor	file:
remote_pending_members	channel.cpp	/^    QList<uint> remote_pending_members;$/;"	m	class:ChannelPrivate	file:
rmConnection	phoneconnector.cpp	/^void PhoneConnector::rmConnection(Connection * conn)$/;"	f	class:PhoneConnector
sendKey	phoneconnector.cpp	/^bool PhoneConnector::sendKey(const QString & key) const$/;"	f	class:PhoneConnector
server	phoneconnector.cpp	/^    const QHostAddress server;$/;"	m	class:PhoneConnectorPrivate	file:
serviceName	channel.cpp	/^QString Channel::serviceName() const$/;"	f	class:Channel
serviceName	connection.cpp	/^QString Connection::serviceName() const$/;"	f	class:Connection
setConnected	connection.cpp	/^void Connection::setConnected(const uint local_handle, const uint remote_handle,$/;"	f	class:Connection
setDND	connection.cpp	/^void Connection::setDND(const bool dnd_state)$/;"	f	class:Connection
setStreamState	channel.cpp	/^void Channel::setStreamState(const org::freedesktop::Telepathy::StreamState state)$/;"	f	class:Channel
settingChanged	phoneconnector.cpp	/^    void settingChanged(const QHash<QString, QString>& data)$/;"	f	class:PhoneConnectorPrivate
signature	connectionmanagertypes.h	/^    QString signature;$/;"	m	class:org::freedesktop::Telepathy::ParameterDefinition
smAdaptor	channel.cpp	/^    StreamedMediaAdaptor * const smAdaptor;$/;"	m	class:ChannelPrivate	file:
state	channel.cpp	/^    org::freedesktop::Telepathy::StreamState state;$/;"	m	class:ChannelPrivate	file:
state	channelstreamedmediatypes.h	/^    quint32 state;$/;"	m	class:org::freedesktop::Telepathy::StreamInfo
state	phoneconnector.cpp	/^        const bool state;$/;"	m	class:__anon2::ConnectedFunctor	file:
state	phoneconnector.cpp	/^        const bool state;$/;"	m	class:__anon2::DNDFunctor	file:
type	channelstreamedmediatypes.h	/^    quint32 type;$/;"	m	class:org::freedesktop::Telepathy::StreamInfo
unregisterObject	channel.cpp	/^void Channel::unregisterObject()$/;"	f	class:Channel
unregisterObject	connection.cpp	/^void Connection::unregisterObject()$/;"	f	class:Connection
~CallFunctor	phoneconnector.cpp	/^        virtual ~CallFunctor() { }$/;"	f	class:__anon2::CallFunctor
~Channel	channel.cpp	/^Channel::~Channel()$/;"	f	class:Channel
~ChannelAdaptor	channeladaptor.cpp	/^ChannelAdaptor::~ChannelAdaptor()$/;"	f	class:ChannelAdaptor
~ChannelPrivate	channel.cpp	/^    ~ChannelPrivate()$/;"	f	class:ChannelPrivate
~Connection	connection.cpp	/^Connection::~Connection()$/;"	f	class:Connection
~ConnectionAdaptor	connectionadaptor.cpp	/^ConnectionAdaptor::~ConnectionAdaptor()$/;"	f	class:ConnectionAdaptor
~ConnectionManager	connectionmanager.cpp	/^ConnectionManager::~ConnectionManager()$/;"	f	class:ConnectionManager
~ConnectionManagerAdaptor	connectionmanageradaptor.cpp	/^ConnectionManagerAdaptor::~ConnectionManagerAdaptor()$/;"	f	class:ConnectionManagerAdaptor
~ConnectionManagerPrivate	connectionmanager.cpp	/^    ~ConnectionManagerPrivate() { }$/;"	f	class:ConnectionManagerPrivate
~ConnectionPrivate	connection.cpp	/^    ~ConnectionPrivate()$/;"	f	class:ConnectionPrivate
~DTMFAdaptor	channelinterfacedtmfadaptor.cpp	/^DTMFAdaptor::~DTMFAdaptor()$/;"	f	class:DTMFAdaptor
~Functor	phoneconnector.cpp	/^        virtual ~Functor() { }$/;"	f	class:__anon2::Functor
~GroupAdaptor	channelinterfacegroupadaptor.cpp	/^GroupAdaptor::~GroupAdaptor()$/;"	f	class:GroupAdaptor
~PhoneConnector	phoneconnector.cpp	/^PhoneConnector::~PhoneConnector()$/;"	f	class:PhoneConnector
~PhoneConnectorPrivate	phoneconnector.cpp	/^    ~PhoneConnectorPrivate()$/;"	f	class:PhoneConnectorPrivate
~PrivacyAdaptor	connectioninterfaceprivacyadaptor.cpp	/^PrivacyAdaptor::~PrivacyAdaptor()$/;"	f	class:PrivacyAdaptor
~StreamedMediaAdaptor	channelstreamedmediaadaptor.cpp	/^StreamedMediaAdaptor::~StreamedMediaAdaptor()$/;"	f	class:StreamedMediaAdaptor
